{"version":3,"sources":["pages/index.js","components/Question.js","components/Result.js","components/QuestionWrapper.js","pages/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Start","to","Button","color","Question","props","question","handleAnswer","btnId","className","id","onClick","event","value","Result","diagnosis","result","affliction","QuestionWrapper","quiz","q1","q2a","q2b","a","q","yes","no","Quiz","state","symptoms","target","updatedQuiz","updatedQuizAnswer","setState","console","log","this","Component","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92a11343.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst Start = () => {\r\n  return (\r\n    <div>\r\n      <h3>CORONAVIRUS, FLU, COLD, OR ALLERGIES?</h3>\r\n      <Link to=\"/quiz\">\r\n        <Button color=\"primary\">Begin!</Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Start;\r\n","import React, { Fragment } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst Question = props => {\r\n  const { question, handleAnswer, btnId } = props;\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center mb-3\">\r\n        <h1>{question}</h1>\r\n      </div>\r\n      <div className=\"row\">\r\n        <Button\r\n          id={btnId}\r\n          className=\"col\"\r\n          color=\"primary\"\r\n          onClick={event => handleAnswer(event, btnId)}\r\n          value=\"true\"\r\n        >\r\n          Yes\r\n        </Button>\r\n        <Button\r\n          id={btnId}\r\n          className=\"col\"\r\n          color=\"danger\"\r\n          onClick={event => handleAnswer(event, btnId)}\r\n          value=\"false\"\r\n        >\r\n          No\r\n        </Button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import React from \"react\";\r\n\r\nconst Result = props => {\r\n  const { diagnosis, result } = props;\r\n  if (diagnosis === \"corona\") {\r\n    return (\r\n      <div>\r\n        <h1>{result.affliction}</h1>\r\n      </div>\r\n    );\r\n  } else if (diagnosis === \"flu\") {\r\n    return (\r\n      <div>\r\n        <h1>{result.affliction}</h1>\r\n      </div>\r\n    );\r\n  } else if (diagnosis === \"allergies\") {\r\n    return (\r\n      <div>\r\n        <h1>{result.affliction}</h1>\r\n      </div>\r\n    );\r\n  } else if (diagnosis === \"cold\") {\r\n    return (\r\n      <div>\r\n        <h1>{result.affliction}</h1>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport Question from \"./Question\";\r\nimport Result from \"./Result\";\r\n\r\nconst QuestionWrapper = props => {\r\n  const { handleAnswer, quiz } = props;\r\n  const q1 = quiz.q1;\r\n  const q2a = quiz.q2a;\r\n  const q2b = quiz.q2b;\r\n\r\n  if (q1.a === \"\" && q2a.a === \"\" && q2b.a === \"\") {\r\n    return (\r\n      <Question\r\n        btnId=\"q1\"\r\n        question={q1.q}\r\n        handleAnswer={handleAnswer}\r\n        {...props}\r\n      />\r\n    );\r\n  } else if (q1.a === \"true\" && q2a.a === \"\") {\r\n    return (\r\n      <Question\r\n        btnId=\"q2a\"\r\n        question={q2a.q}\r\n        handleAnswer={handleAnswer}\r\n        {...props}\r\n      />\r\n    );\r\n  } else if (q1.a === \"false\" && q2b.a === \"\") {\r\n    return (\r\n      <Question\r\n        btnId=\"q2b\"\r\n        question={q2b.q}\r\n        handleAnswer={handleAnswer}\r\n        {...props}\r\n      />\r\n    );\r\n  } else if (q1.a === \"true\" && q2a.a === \"true\") {\r\n    return <Result result={quiz.q2a.result.yes} diagnosis=\"corona\" />;\r\n  } else if (q1.a === \"true\" && q2a.a === \"false\") {\r\n    return <Result result={quiz.q2a.result.no} diagnosis=\"flu\" />;\r\n  } else if (q1.a === \"false\" && q2b.a === \"true\") {\r\n    return <Result result={quiz.q2b.result.yes} diagnosis=\"allergies\" />;\r\n  } else if (q1.a === \"false\" && q2b.a === \"false\") {\r\n    return <Result result={quiz.q2b.result.no} diagnosis=\"cold\" />;\r\n  }\r\n};\r\n\r\nexport default QuestionWrapper;\r\n","import React, { Component } from \"react\";\r\nimport QuestionWrapper from \"../components/QuestionWrapper\";\r\n\r\nclass Quiz extends Component {\r\n  state = {\r\n    quiz: {\r\n      q1: { q: \"Do you have a fever?\", a: \"\" },\r\n      q2a: {\r\n        q: \"Are you experiencing shorteness of breath?\",\r\n        a: \"\",\r\n        result: {\r\n          yes: {\r\n            affliction: \"You MAY have CORONAVIRUS\",\r\n            symptoms: [\"Cough\", \"Fatigue\", \"Weakness\", \"Exhaustion\"]\r\n          },\r\n          no: {\r\n            affliction: \"You MAY have the flu\",\r\n            symptoms: [\"Cough\", \"Fatigue\", \"Weakness\", \"Exhaustion\"]\r\n          }\r\n        }\r\n      },\r\n      q2b: {\r\n        q: \"Do you have itchy eyes?\",\r\n        a: \"\",\r\n        result: {\r\n          yes: {\r\n            affliction: \"You MAY have allergies\",\r\n            symptoms: [\"Sneezing\", \"Runny Nose\"]\r\n          },\r\n          no: {\r\n            affliction: \"You MAY have the common cold\",\r\n            symptoms: [\"Sneezing\", \"Runny Nose\", \"Mild Chest Discomfort\"]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  handleAnswer = (event, btnId) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const updatedQuiz = { ...this.state.quiz };\r\n    const updatedQuizAnswer = { ...updatedQuiz[btnId] };\r\n    updatedQuizAnswer.a = value;\r\n    updatedQuiz[btnId] = updatedQuizAnswer;\r\n    this.setState({\r\n      quiz: updatedQuiz\r\n    });\r\n    console.log({ updatedQuiz });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <QuestionWrapper\r\n          quiz={this.state.quiz}\r\n          handleAnswer={this.handleAnswer}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Start from \"./pages\";\nimport Quiz from \"./pages/Quiz\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"full-height parent\">\n        <Switch>\n          <Route path=\"/quiz\" component={Quiz}></Route>\n          <Route path=\"/\" component={Start}></Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}